'''
Вопрос №3

На языке Python или С++ предложить алгоритм, который быстрее всего (по процессорным тикам) отсортирует данный ей массив чисел. 
Массив может быть любого размера со случайным порядком чисел (в том числе и отсортированным). 
Объяснить, почему вы считаете, что функция соответствует заданным критериям.
'''
from random import randint


def quick_sort(arr: list[int]) -> list[int]:
    if len(arr) < 2:
        return arr
    
    left, right = [], []
    pivot = arr.pop(randint(0, len(arr)-1))

    for num in arr:
        if num < pivot:
            left.append(num)
        else:
            right.append(num)

    return quick_sort(left) + [pivot] + quick_sort(right)

"""
Почему быстрая сортировка соответствует заданным критериям:

1. Скорость: Быстрая сортировка имеет временную сложность O(n log n) в среднем случае, что означает, что время выполнения растёт слишком медленно по сравнению с размером входных данных. 
Это делает её одним из самых быстрых алгоритмов сортировки для больших массивов данных.

2. Адаптивность к предварительной сортировке: Быстрая сортировка хорошо работает даже с частично отсортированными данными. 
Её производительность не зависит от начального порядка элементов, что позволяет эффективно сортировать как отсортированные, так и неотсортированные массивы.

3. Эффективное использование памяти: В реализации используются дополнительные списки для разделения элементов на подмассивы, 
но размер этих списков ограничен только количеством элементов в исходном массиве. Поэтому быстрая сортировка требует линейное количество дополнительной памяти.
"""